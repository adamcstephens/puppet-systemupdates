check_upgraded_package() {
  package=$1
  # check today for a change to the requested package
  rpm -qa --queryformat '%{installtime}(%{installtime:date}) %{name}\n' $package | grep -q "$(date +"%d %b %Y")"
  retval=$?
  if [ $retval -eq 0 ]
  then
    log_and_output "Found new package: $(rpm -qa $package | sort | head -n1)"
  fi
  return $retval
}

check_newer_kernel() {
  if rpm -q kernel > /dev/null
  then
    kernelpkg="kernel"
  elif rpm -q kernel-PAE > /dev/null
  then
    kernelpkg="kernel-PAE"
  fi

  UNAME=`uname -r | awk -F\- '{print $2}' | sed 's/EL//g;s/el5//g;s/smp//g;s/PAE//g'`
  CURMAJ=`echo $UNAME | cut -f1 -d.`
  CURMIN=`echo $UNAME | cut -f2 -d.`
  CURSUB=`echo $UNAME | cut -f3 -d.`

  NEWESTMAJ=$CURMAJ
  NEWESTMIN=$CURMIN
  NEWESTSUB=$CURSUB
  NEWESTKERN=''

  for kern in `rpm -q --queryformat="%{version}-%{release}\n" $kernelpkg | awk -F\- '{print $2}' | sed 's/EL//g;s/el5//g;s/smp//g;s/PAE//g'`
  do
    KERNMAJ=`echo $kern | cut -f1 -d.`
    KERNMIN=`echo $kern | cut -f2 -d.`
    KERNSUB=`echo $kern | cut -f3 -d.`

    if [[ "$KERNMAJ" -gt "$NEWESTMAJ" ]]
    then
      NEWESTMAJ=$KERNMAJ
      NEWESTMIN=$KERNMIN
      NEWESTMIN=$KERNSUB
      NEWESTKERN=$kern

    elif [[ "$KERNMAJ" -eq "$NEWESTMAJ" ]]
    then
      if [[ "$KERNMIN" -gt "$NEWESTMIN" ]]
      then
        NEWESTMAJ=$KERNMAJ
        NEWESTMIN=$KERNMIN
        NEWESTMIN=$KERNSUB
        NEWESTKERN=$kern

      elif [[ "$KERNMIN" -eq "$NEWESTMIN" ]]
      then
        if [[ "$KERNSUB" -gt "$NEWESTSUB" ]]
        then
          NEWESTMAJ=$KERNMAJ
          NEWESTMIN=$KERNMIN
          NEWESTMIN=$KERNSUB
          NEWESTKERN=$kern

        fi
      fi
    fi
  done

  echo "${NEWESTKERN}"
}

validate_newer_kernel() {
  if rpm -q kernel > /dev/null
  then
    kernelpkg="kernel"
  elif rpm -q kernel-PAE > /dev/null
  then
    kernelpkg="kernel-PAE"
  fi

  KERN=$@

  if rpm -V `rpm -q kernel | grep ${KERN}` > /dev/null
  then
    if file /boot/initramfs-$(rpm -q ${kernelpkg} | grep ${KERN} | awk -F${kernelpkg}\- '{print $NF}').img | grep gzip > /dev/null
    then
      if gzip -c -d /boot/initramfs-$(rpm -q ${kernelpkg} | grep ${KERN} | awk -F${kernelpkg}\- '{print $NF}').img > /dev/null
      then
        return 0
      else
        log_and_output "CPIO verification of initramfs for ${KERN} failed"
      fi
    elif file /boot/initramfs-$(rpm -q ${kernelpkg} | grep ${KERN} | awk -F${kernelpkg}\- '{print $NF}').img | grep cpio > /dev/null
    then
      if cpio -i --only-verify-crc --file=/boot/initramfs-$(rpm -q ${kernelpkg} | grep ${KERN} | awk -F${kernelpkg}\- '{print $NF}').img 2>&1 > /dev/null
      then
        return 0
      else
        log_and_output "CPIO verification of initramfs for ${KERN} failed"
      fi
    else
      log_and_output "Unable to determine file type of initramfs for ${KERN}"
      return 1
    fi
  else
    log_and_output "RPM validation of ${KERN} failed"
    return 1
  fi
}

check_reboot() {
  doreboot=false
  
  NEWESTKERN=$(check_newer_kernel)

  if [ $NEWESTKERN ]
  then 
    validate_newer_kernel $NEWESTKERN && doreboot=true

    if [ "$doreboot" == "true" ]
    then
      log_and_output "Validated new kernel ${NEWESTKERN}"
      doreboot=true
    else
      # Bag things happened, bail
      log_and_output "Error validating new kernel ${NEWESTKERN}"
      return 1
    fi
  fi

<% @pkgtosystemreboot.each do | pkg | -%>
  check_upgraded_package <%= pkg %> && doreboot=true

<% end -%>
  if [[ "$doreboot" == 'true' ]]
  then
    return 0
  else
    return 1
  fi
}

do_reboot() {
  if check_reboot
  then
    log_and_output "Rebooting system."
    shutdown -r now
<% if @pkgtosvcrestart.length > 0  then -%>
  else
    do_pkgtosvc_restart
<% end -%>
  fi
}
